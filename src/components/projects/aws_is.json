{
    "title": "AWS Instance Scheduler",
    "description": "A web-application that automates start-up and shutdown times for AWS insances.",
    "why": "During my summer internship at Quest Diagnostics, I worked with the DevSecOps team and learned that over 250+ AWS accounts had multiple instances running even when they werenâ€™t needed, especially for the development, testing, and QA stages. The unneccesary uptime lead to high cloud operational costs. Manually shutting them down would be time-consuming and employees across different time zones might still be using them. Our solution was to automate the scheduling process, enabling instances to shut down when employees of that account know they will not be using that instance or start up before they are needed so that they are ready to go.",
    "what": "The AWS Instance Scheduler is a web application that allows employees to create schedules for AWS instances, specifying the days and times they should start up and shut down. For example, an employee can schedule an instance to shut down at 5 PM on Fridays and start up at 8 AM on Mondays to avoid unnecessary costs over the weekend. Once a schedule request is submitted and approved by the CloudOps team, it is added to the system and displayed on the Schedules Page, which serves as a record of all schedules, including details from the submission form. Employees can also request modifications to existing schedules in case of errors or changing needs. Additionally, the platform includes a dashboard that lists all scheduled instances and displays their current running status, providing a clear overview of active and inactive resources.",
    "how": "By utilizing HTML/CSS, TypeScript, and the Angular framework, I developed the front-end of the web application. I also collaborated with Quest's UI/UX team to integrate the company's branding into the design. For the backend, I leveraged REST APIs and DynamoDB API to push form data to AWS DynamoDB, manage schedule modifications, and retrieve schedule information. To automate scheduling across multiple AWS accounts, I implemented a Hub-and-Spoke model, allowing a central hub account to manage schedules for designated spoke accounts. Deployment and configuration were automated using AWS CloudFormation templates within a Terraform Infrastructure-as-Code (IaC) pipeline, streamlining resource management across Quest's 250+ AWS accounts.",
    "future": "Due to the time constraint, I was unable to see this project to deployment. I ended with the project by showcasing it to the leadership team, which included the CIO and the head of DevSecOps, at the end of my internship. I presented my project and realistic data to demonstrate the impact of this project. For example, if we were to shut down all non-production environments (from 12am Saturdays to 8pm Sundays), it would be an estimated 25% of savings. After my presentation, the leadership team discussed further developing this project and potentially expanding it to Quest's other cloud operational platforms.",
    "tools": ["HTML/CSS", "Typescript", "Angular", "AWS"],
    "banner": "../src/assets/aws_is/AWS.png", 
    "slug": "aws_is"
}